# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\Users\Z0228550\OneDrive - ZF Friedrichshafen AG\Documents\Python_projects\minitab\Plot_interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
#添加项
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QFont
import sys

# 
class Ui_Plot_interface(QDialog):
    #添加初始化函数
    def __init__(self, name = 'Pareto', data = {1: [1, 3], 2: [2, 4]}):          
        
        super(Ui_Plot_interface,self).__init__()
        self.setupUi(self)
        self.input_Data = data
        
        ### 根据不同的图表来修改交互界面的按钮
        if name == 'Pareto':
            self.pareto()

        if name == 'Individual':
            
            self.Individual_p()

        if name == 'box':
            
            self.box()
        ###     

    ### Qtdesigner生成项
    def setupUi(self, Plot_interface):
        Plot_interface.setObjectName("Plot_interface")
        Plot_interface.resize(574, 445)
        self.listWidget = QtWidgets.QListWidget(Plot_interface)
        self.listWidget.setGeometry(QtCore.QRect(60, 50, 191, 321))
        self.listWidget.setObjectName("listWidget")
        self.listWidget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.select_btn = QtWidgets.QPushButton(Plot_interface, text = 'Select')
        self.select_btn.setFont(QFont('Arial', 10))
        self.select_btn.setObjectName("select_btn")
        self.select_btn.setGeometry(QtCore.QRect(110, 380, 75, 23))
        self.label_4 = QtWidgets.QLabel(Plot_interface)
        self.label_4.setGeometry(QtCore.QRect(60, 20, 121, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.buttonBox = QtWidgets.QDialogButtonBox(Plot_interface)
        self.buttonBox.setGeometry(QtCore.QRect(390, 370, 156, 23))
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.label_3 = QtWidgets.QLabel(Plot_interface)
        self.label_3.setGeometry(QtCore.QRect(330, 20, 111, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.toolBox = QtWidgets.QToolBox(Plot_interface)
        self.toolBox.setGeometry(QtCore.QRect(270, 70, 251, 261))
        self.toolBox.setObjectName("toolBox")
        self.page = QtWidgets.QWidget()
        self.page.setGeometry(QtCore.QRect(0, 0, 251, 201))
        self.page.setObjectName("page")
        self.layoutWidget = QtWidgets.QWidget(self.page)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 10, 211, 151))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 3, 0, 1, 1)
        self.comboBox = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBox.setObjectName("comboBox")
        self.gridLayout.addWidget(self.comboBox, 2, 0, 1, 1)
        self.comboBox_2 = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBox_2.setObjectName("comboBox_2")
        self.gridLayout.addWidget(self.comboBox_2, 4, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 1, 0, 1, 1)
        self.toolBox.addItem(self.page, "")
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setGeometry(QtCore.QRect(0, 0, 251, 201))
        self.page_2.setObjectName("page_2")
        self.layoutWidget_2 = QtWidgets.QWidget(self.page_2)
        self.layoutWidget_2.setGeometry(QtCore.QRect(10, 10, 211, 151))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.layoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_6 = QtWidgets.QLabel(self.layoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.gridLayout_2.addWidget(self.label_6, 1, 0, 1, 1)
        ### text input2
        self.text_input2 = QtWidgets.QTextEdit(self.layoutWidget_2)
        self.text_input2.setObjectName("text_input2")
        self.gridLayout_2.addWidget(self.text_input2, 2, 0, 1, 1)
        ###
        self.clear_btn2 = QtWidgets.QPushButton(self.layoutWidget, text = 'Clear')
        self.clear_btn2.setFont(QFont('Arial', 10))
        self.clear_btn2.setObjectName("clear_btn2")
        self.gridLayout_2.addWidget(self.clear_btn2, 3,0,1,1)
        self.toolBox.addItem(self.page_2, "")

        self.retranslateUi(Plot_interface)
        self.toolBox.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Plot_interface)
        
        self.buttonBox.rejected.connect(Plot_interface.reject) # type: ignore

    def retranslateUi(self, Plot_interface):
        _translate = QtCore.QCoreApplication.translate
        Plot_interface.setWindowTitle(_translate("Plot_interface", "Plots Interface"))
        self.label_4.setText(_translate("Plot_interface", "Title List"))
        self.label_3.setText(_translate("Plot_interface", "TextLabel"))
        self.label_2.setText(_translate("Plot_interface", "Values"))
        self.label.setText(_translate("Plot_interface", "Items"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page), _translate("Plot_interface", "Plotted by Items\' Value"))
        self.label_6.setText(_translate("Plot_interface", "Items:"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page_2), _translate("Plot_interface", "Plotted by Items\' Frequency"))
    ###
        
    def pareto(self):
        
        _translate = QtCore.QCoreApplication.translate
        self.label_3.setText(_translate("Plot_interface", "Pareto"))
        
        for key in self.input_Data.keys():
            self.listWidget.addItem(str(key))
            self.comboBox.addItem(str(key))
            self.comboBox_2.addItem(str(key))

        self.t_set2 = set()
        
        self.listWidget.doubleClicked.connect(self.add_to_column_list)
        self.select_btn.clicked.connect(self.printselectText)
        self.clear_btn2.clicked.connect(self.clear)
        
        #链接plot_pareto
        self.buttonBox.accepted.connect(self.plot_pareto) # type: ignore
        

    def plot_pareto(self):
        from Pareto import Paretoplt 

        if self.toolBox.currentIndex() == 1:
            self.plot_pareto_by_freq()
            return ''
        
        try:
            item = self.input_Data[self.comboBox.currentText()]
            data = self.input_Data[self.comboBox_2.currentText()]
        except:
            item = self.input_Data[int(self.comboBox.currentText())]
            data = self.input_Data[int(self.comboBox_2.currentText())]

        length = len(item) if len(item)<len(data) else len(data)
        new_Set = set()
        new_data = {}
        for it in item:
            new_Set.add(it)

        if len(new_Set)==len(item):
            Pareto = Paretoplt([int(i) for i in data], item)
            Pareto.exec_()
        else:
            for i in range(length):
                if item[i] not in new_data:
                    new_data[item[i]] = int(data[i])
                else:
                    new_data[item[i]]+=int(data[i])
            # print(new_data.items(), new_data.keys())
            Pareto = Paretoplt([i for _, i in new_data.items()], [k for k, _ in new_data.items()])
            Pareto.exec_()



    #画频率Pareto 图
    def plot_pareto_by_freq(self):
        from Pareto import Paretoplt 
        text = str(self.text_input2.toPlainText())
        item_set = set()
        data_sets = []
        item_sets = []
        for key in text.split():
            item = self.input_Data[key]
            for it in item:
                item_set.add(it)
            item_sets.append([i for i in item_set])
            data = []
            for i in item_set:
                data.append(item.count(i))
            data_sets.append(data)
            item_set = set()
        # print(data_sets, item_sets)

        for i in range(len(data_sets)):

            Pareto = Paretoplt(data_sets[i], item_sets[i])
            Pareto.exec_()

    
    def Individual_p(self):

        ###对交换界面按钮进行修改
        self.gridLayout.removeWidget(self.label)
        self.gridLayout.removeWidget(self.label_2)
        self.gridLayout.removeWidget(self.comboBox)
        self.gridLayout.removeWidget(self.comboBox_2)
        del self.label
        del self.label_2
        del self.comboBox
        del self.comboBox_2
        
        _translate = QtCore.QCoreApplication.translate
        self.label_3.setText(_translate("Plot_interface", "Individual Plot Series:"))
        self.label_3.setGeometry(QtCore.QRect(330, 20, 500, 16))
        self.text_input = QtWidgets.QTextEdit(self.layoutWidget)
        self.text_input.setObjectName("text_input")
        self.clear_btn = QtWidgets.QPushButton(self.layoutWidget, text = 'Clear')
        self.clear_btn.setFont(QFont('Arial', 10))
        self.clear_btn.setObjectName("clear_btn")
        self.gridLayout.addWidget(self.text_input)
        self.gridLayout.addWidget(self.clear_btn)

        self.toolBox.setItemText(self.toolBox.indexOf(self.page), _translate("Plot_interface", "Plotted by Columns (Titles)"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page_2), _translate("Plot_interface", "Use Row as Items (if applicable)"))
        ###

        for key in self.input_Data.keys():
            self.listWidget.addItem(str(key))
        
        self.t_set2 = set()
        self.t_set = set()
        self.listWidget.doubleClicked.connect(self.add_to_column_list)
        self.select_btn.clicked.connect(self.printselectText)
        self.clear_btn.clicked.connect(self.clear)
        self.clear_btn2.clicked.connect(self.clear)
        self.buttonBox.accepted.connect(self.plot_Individual) # type: ignore
    

    def plot_Individual(self):
        from Individual import Indiviplt 
        item = []
        data = []
        text = str(self.text_input.toPlainText())
        text_page2 = str(self.text_input2.toPlainText())
        # print(text)

        try:
            if not text_page2 or text_page2 == '':
                for key in text.split():
                    item.append(str(key))
                    data.append([int(i) for i in self.input_Data[key]])
                # print(item)
                Indivi = Indiviplt(data, item)
                Indivi.exec_()
            
            else:
                
                key1 = text.split()
                keys = text_page2.split()
                
                for plot in range(len(key1)):
                    data_set = {}
                    for da in range(len(self.input_Data[key1[plot]])):
                        title = self.input_Data[keys[0]][da]
                        for i in range(1, len(keys)):
                            
                            if len(keys) == 1:
                                break
                            else:
                                title += '-'+self.input_Data[keys[i]][da]
                        if title not in data_set:
                            data_set[title] = [int(self.input_Data[key1[plot]][da])]
                        else:
                            data_set[title].append(int(self.input_Data[key1[plot]][da]))
                    data_page2 = [data_set[title] for title in data_set.keys()]
                    item_page2 = [title for title in data_set.keys()]
                    Indivi = Indiviplt(data_page2, item_page2)
                    Indivi.exec_()

        except Exception as e:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.setWindowTitle("Error")
            error_dialog.showMessage(str(e))
            error_dialog.exec_()

    def box(self):


        ###对交换界面按钮进行修改
        self.gridLayout.removeWidget(self.label)
        self.gridLayout.removeWidget(self.label_2)
        self.gridLayout.removeWidget(self.comboBox)
        self.gridLayout.removeWidget(self.comboBox_2)
        del self.label
        del self.label_2
        del self.comboBox
        del self.comboBox_2
        
        _translate = QtCore.QCoreApplication.translate
        self.label_3.setText(_translate("Plot_interface", "Box Plot Series:"))
        self.label_3.setGeometry(QtCore.QRect(330, 20, 500, 16))
        self.text_input = QtWidgets.QTextEdit(self.layoutWidget)
        self.text_input.setObjectName("text_input")
        self.clear_btn = QtWidgets.QPushButton(self.layoutWidget, text = 'Clear')
        self.clear_btn.setFont(QFont('Arial', 10))
        self.clear_btn.setObjectName("clear_btn")
        self.gridLayout.addWidget(self.text_input)
        self.gridLayout.addWidget(self.clear_btn)

        self.toolBox.setItemText(self.toolBox.indexOf(self.page), _translate("Plot_interface", "Plotted by Columns (Titles)"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page_2), _translate("Plot_interface", "Use Row as Items (if applicable)"))
        ###
        
        for key in self.input_Data.keys():
            self.listWidget.addItem(str(key))

        self.t_set2 = set()
        self.t_set = set()
        self.listWidget.doubleClicked.connect(self.add_to_column_list)
        self.select_btn.clicked.connect(self.printselectText)
        self.clear_btn.clicked.connect(self.clear)
        self.clear_btn2.clicked.connect(self.clear)
        self.buttonBox.accepted.connect(self.plot_box) # type: ignore

    def plot_box(self):
        from Boxplot import boxplt 
        item = []
        data = []
        text = str(self.text_input.toPlainText())
        text_page2 = str(self.text_input2.toPlainText())
        # print(text)
        try:
            if not text_page2 or text_page2 == '':
                for key in text.split():
                    item.append(str(key))
                    data.append([int(i) for i in self.input_Data[key]])
                # print(item)
                boxp = boxplt(data, item)
                boxp.exec_()

            else:
                
                key1 = text.split()
                keys = text_page2.split()
                
                for plot in range(len(key1)):
                    data_set = {}
                    for da in range(len(self.input_Data[key1[plot]])):
                        title = self.input_Data[keys[0]][da]
                        for i in range(1, len(keys)):
                            
                            if len(keys) == 1:
                                break
                            else:
                                title += '-'+self.input_Data[keys[i]][da]
                        if title not in data_set:
                            data_set[title] = [int(self.input_Data[key1[plot]][da])]
                        else:
                            data_set[title].append(int(self.input_Data[key1[plot]][da]))
                    data_page2 = [data_set[title] for title in data_set.keys()]
                    item_page2 = [title for title in data_set.keys()]
                    boxp = boxplt(data_page2, item_page2)
                    boxp.exec_()

        except Exception as e:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.setWindowTitle("Error")
            error_dialog.showMessage(str(e))
            error_dialog.exec_()

    #双击将选中项读取到text_input
    def add_to_column_list(self):
        try:

            selected = self.listWidget.currentItem().text()
            # print(self.t_set)
            try:
                text = self.text_input.toPlainText() 
            except:
                text = ""
            if self.toolBox.currentIndex() == 0:

                # print(self.toolBox.currentIndex())
                try:
                    if selected in self.t_set:
                        pass
                    else:
                        self.t_set.add(selected)
                        if text != "":
                            text += " "
                        self.text_input.setText(text + selected)
                except:
                    pass
            text2 = self.text_input2.toPlainText()
            if self.toolBox.currentIndex() == 1:

                # print(self.toolBox.currentIndex())

                if selected in self.t_set2:
                    pass
                else:
                    self.t_set2.add(selected)
                    if text2 != "":
                        text2 += " "
                    self.text_input2.setText(text2 + selected)

        except Exception as e:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.setWindowTitle("Error")
            error_dialog.showMessage(str(e))
            error_dialog.exec_()
            
            return ''
    
    def clear(self):
        if self.toolBox.currentIndex() == 0:
            self.text_input.clear()
        if self.toolBox.currentIndex() == 1:
            self.text_input2.clear()
        self.t_set = set()
        self.t_set2 = set()

    #将选中项读取到text_input
    def printselectText(self):
            items = self.listWidget.selectedItems()
            selected_texts = [str(item.text()) for item in items]
            try:
                if self.toolBox.currentIndex() == 0:
                    self.text_input.setText(" ".join(selected_texts))
                if self.toolBox.currentIndex() == 1:
                    self.text_input2.setText(" ".join(selected_texts))
            except:
                pass


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Plot_interface()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())